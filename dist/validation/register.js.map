{"version":3,"sources":["../../src/validation/register.js"],"names":["Validator","require","isEmpty","module","exports","validateRegisterInput","data","errors","name","email","password","password_confirm","isLength","min","max","isEmail","equals","isValid"],"mappings":";;AAAA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,UAAUD,QAAQ,YAAR,CAAhB;;AAEAE,OAAOC,OAAP,GAAiB,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACrD,KAAIC,SAAS,EAAb;AACAD,MAAKE,IAAL,GAAY,CAACN,QAAQI,KAAKE,IAAb,CAAD,GAAsBF,KAAKE,IAA3B,GAAkC,EAA9C;AACAF,MAAKG,KAAL,GAAa,CAACP,QAAQI,KAAKG,KAAb,CAAD,GAAuBH,KAAKG,KAA5B,GAAoC,EAAjD;AACAH,MAAKI,QAAL,GAAgB,CAACR,QAAQI,KAAKI,QAAb,CAAD,GAA0BJ,KAAKI,QAA/B,GAA0C,EAA1D;AACAJ,MAAKK,gBAAL,GAAwB,CAACT,QAAQI,KAAKK,gBAAb,CAAD,GAAkCL,KAAKK,gBAAvC,GAA0D,EAAlF;;AAEA,KAAG,CAACX,UAAUY,QAAV,CAAmBN,KAAKE,IAAxB,EAA8B,EAAEK,KAAK,CAAP,EAAUC,KAAK,EAAf,EAA9B,CAAJ,EAAwD;AACvDP,SAAOC,IAAP,GAAc,oCAAd;AACA;;AAED,KAAGR,UAAUE,OAAV,CAAkBI,KAAKE,IAAvB,CAAH,EAAiC;AAChCD,SAAOC,IAAP,GAAc,wBAAd;AACA;;AAED,KAAG,CAACR,UAAUe,OAAV,CAAkBT,KAAKG,KAAvB,CAAJ,EAAmC;AAClCF,SAAOE,KAAP,GAAe,kBAAf;AACA;;AAED,KAAGT,UAAUE,OAAV,CAAkBI,KAAKG,KAAvB,CAAH,EAAkC;AACjCF,SAAOE,KAAP,GAAe,mBAAf;AACA;;AAED,KAAG,CAACT,UAAUY,QAAV,CAAmBN,KAAKI,QAAxB,EAAkC,EAACG,KAAK,CAAN,EAASC,KAAK,EAAd,EAAlC,CAAJ,EAA0D;AACzDP,SAAOG,QAAP,GAAkB,4BAAlB;AACA;;AAED,KAAGV,UAAUE,OAAV,CAAkBI,KAAKI,QAAvB,CAAH,EAAqC;AACpCH,SAAOG,QAAP,GAAkB,sBAAlB;AACA;;AAED,KAAG,CAACV,UAAUY,QAAV,CAAmBN,KAAKK,gBAAxB,EAA0C,EAACE,KAAK,CAAN,EAASC,KAAK,EAAd,EAA1C,CAAJ,EAAkE;AACjEP,SAAOI,gBAAP,GAA0B,4BAA1B;AACA;;AAED,KAAG,CAACX,UAAUgB,MAAV,CAAiBV,KAAKI,QAAtB,EAAgCJ,KAAKK,gBAArC,CAAJ,EAA4D;AAC3DJ,SAAOI,gBAAP,GAA0B,0CAA1B;AACA;;AAED,KAAGX,UAAUE,OAAV,CAAkBI,KAAKK,gBAAvB,CAAH,EAA6C;AAC5CJ,SAAOI,gBAAP,GAA0B,sBAA1B;AACA;;AAED,QAAO;AACNJ,gBADM;AAENU,WAASf,QAAQK,MAAR;AAFH,EAAP;AAIA,CA/CD","file":"register.js","sourcesContent":["const Validator = require('validator');\nconst isEmpty = require('./is-empty');\n\nmodule.exports = function validateRegisterInput(data) {\n\tlet errors = {};\n\tdata.name = !isEmpty(data.name) ? data.name : '';\n\tdata.email = !isEmpty(data.email) ? data.email : '';\n\tdata.password = !isEmpty(data.password) ? data.password : '';\n\tdata.password_confirm = !isEmpty(data.password_confirm) ? data.password_confirm : '';\n\n\tif(!Validator.isLength(data.name, { min: 2, max: 30 })) {\n\t\terrors.name = 'Name must be between 2 to 30 chars';\n\t}\n\t\n\tif(Validator.isEmpty(data.name)) {\n\t\terrors.name = 'Name field is required';\n\t}\n\n\tif(!Validator.isEmail(data.email)) {\n\t\terrors.email = 'Email is invalid';\n\t}\n\n\tif(Validator.isEmpty(data.email)) {\n\t\terrors.email = 'Email is required';\n\t}\n\n\tif(!Validator.isLength(data.password, {min: 6, max: 30})) {\n\t\terrors.password = 'Password must have 6 chars';\n\t}\n\n\tif(Validator.isEmpty(data.password)) {\n\t\terrors.password = 'Password is required';\n\t}\n\n\tif(!Validator.isLength(data.password_confirm, {min: 6, max: 30})) {\n\t\terrors.password_confirm = 'Password must have 6 chars';\n\t}\n\n\tif(!Validator.equals(data.password, data.password_confirm)) {\n\t\terrors.password_confirm = 'Password and Confirm Password must match';\n\t}\n\n\tif(Validator.isEmpty(data.password_confirm)) {\n\t\terrors.password_confirm = 'Password is required';\n\t}\n\n\treturn {\n\t\terrors,\n\t\tisValid: isEmpty(errors)\n\t};\n};"]}