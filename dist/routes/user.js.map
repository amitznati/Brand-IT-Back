{"version":3,"sources":["../../src/routes/user.js"],"names":["express","require","router","Router","gravatar","bcrypt","jwt","passport","validateRegisterInput","validateLoginInput","User","post","req","res","body","errors","isValid","status","json","findOne","email","then","user","avatar","url","s","r","d","newUser","name","password","genSalt","err","salt","console","error","hash","save","compare","isMatch","payload","id","sign","expiresIn","token","success","get","authenticate","session","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst gravatar = require('gravatar');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst passport = require('passport');\nconst validateRegisterInput = require('../validation/register');\nconst validateLoginInput = require('../validation/login');\nconst User = require('../models/User');\n\nrouter.post('/register', function(req, res) {\n\n\tconst { errors, isValid } = validateRegisterInput(req.body);\n\n\tif(!isValid) {\n\t\treturn res.status(400).json(errors);\n\t}\n\tUser.findOne({\n\t\temail: req.body.email\n\t}).then(user => {\n\t\tif(user) {\n\t\t\treturn res.status(400).json({\n\t\t\t\temail: 'Email already exists'\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tconst avatar = gravatar.url(req.body.email, {\n\t\t\t\ts: '200',\n\t\t\t\tr: 'pg',\n\t\t\t\td: 'mm'\n\t\t\t});\n\t\t\tconst newUser = new User({\n\t\t\t\tname: req.body.name,\n\t\t\t\temail: req.body.email,\n\t\t\t\tpassword: req.body.password,\n\t\t\t\tavatar\n\t\t\t});\n\t\t\t\n\t\t\tbcrypt.genSalt(10, (err, salt) => {\n\t\t\t\tif(err) console.error('There was an error', err);\n\t\t\t\telse {\n\t\t\t\t\tbcrypt.hash(newUser.password, salt, (err, hash) => {\n\t\t\t\t\t\tif(err) console.error('There was an error', err);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tnewUser.password = hash;\n\t\t\t\t\t\t\tnewUser\n\t\t\t\t\t\t\t\t.save()\n\t\t\t\t\t\t\t\t.then(user => {\n\t\t\t\t\t\t\t\t\tres.json(user);\n\t\t\t\t\t\t\t\t}); \n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n});\n\nrouter.post('/login', (req, res) => {\n\n\tconst { errors, isValid } = validateLoginInput(req.body);\n\n\tif(!isValid) {\n\t\treturn res.status(400).json(errors);\n\t}\n\n\tconst email = req.body.email;\n\tconst password = req.body.password;\n\n\tUser.findOne({email})\n\t\t.then(user => {\n\t\t\tif(!user) {\n\t\t\t\terrors.email = 'User not found';\n\t\t\t\treturn res.status(404).json(errors);\n\t\t\t}\n\t\t\tbcrypt.compare(password, user.password)\n\t\t\t\t.then(isMatch => {\n\t\t\t\t\tif(isMatch) {\n\t\t\t\t\t\tconst payload = {\n\t\t\t\t\t\t\tid: user.id,\n\t\t\t\t\t\t\tname: user.name,\n\t\t\t\t\t\t\tavatar: user.avatar\n\t\t\t\t\t\t};\n\t\t\t\t\t\tjwt.sign(payload, 'secret', {\n\t\t\t\t\t\t\texpiresIn: 3600\n\t\t\t\t\t\t}, (err, token) => {\n\t\t\t\t\t\t\tif(err) console.error('There is some error in token', err);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\t\ttoken: `Bearer ${token}`\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\terrors.password = 'Incorrect Password';\n\t\t\t\t\t\treturn res.status(400).json(errors);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n});\n\nrouter.get('/me', passport.authenticate('jwt', { session: false }), (req, res) => {\n\treturn res.json({\n\t\tid: req.user.id,\n\t\tname: req.user.name,\n\t\temail: req.user.email\n\t});\n});\n\nmodule.exports = router;"]}