{"version":3,"sources":["../../../src/api/theme/theme.controller.js"],"names":["GLOBAL_RESPONSES","require","LOCAL_RESPONSES","Theme","exports","create","req","res","ModelInstance","sync","force","then","body","theme","resultResponse","CREATE_SUCCESS","resourceId","dataValues","id","json","catch","err","send","getAll","findAll","limit","theme_result","length","THEME_NOT_FOUND","getByID","findOne","where","params","theme_id","PRODUCT_NOT_FOUND","removeByID","destroy","DELETE_SUCCESS","updateByID","find","model","updateAttributes","UPDATE_SUCCESS"],"mappings":"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","file":"theme.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * POST\t/theme\t\t\t\t ->\tcreate\n * GET\t /theme\t\t\t\t ->\tgetAll\n * GET\t /theme /:id\t\t\t->\tgetByID\n * DELETE\t/theme /:id\t\t\t->\tremoveByID\n * PATCH\t /theme /:id\t\t\t->\tupdateByID\n */\n\n//const _ = require('lodash');\n//const {ObjectID} = require('mongodb');\nconst GLOBAL_RESPONSES = require('../global/responses');\nconst LOCAL_RESPONSES = require('./responses');\n\nconst {Theme} = require('./../sequelize');\n\n\n\nexports.create = function(req, res) {\n\tlet ModelInstance = Theme;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.create({\n\t\t\t...req.body\n\t\t}).then((theme) => {\n\t\t\tlet resultResponse = GLOBAL_RESPONSES.CREATE_SUCCESS;\n\t\t\tresultResponse.resourceId = theme.dataValues.id;\n\t\t\tres.json({resultResponse});\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\t});\n};\n\n\nexports.getAll = function (req, res) {\n\tlet ModelInstance = Theme;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.findAll({\n\t\t\tlimit: 40\n\t\t}).then((theme_result) => {\n\t\t\tif(!theme_result || (theme_result && theme_result.length == 0)){\n\t\t\t\tres.json(LOCAL_RESPONSES.THEME_NOT_FOUND);\n\t\t\t}\n\t\t\tres.json(theme_result);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n\t\n};\n\n\nexports.getByID = function (req, res) {\n\tlet ModelInstance = Theme;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync().then(function () {\n\t\t// Table created\n\t\treturn Theme.findOne({\n\t\t\twhere: {\n\t\t\t\tid: req.params.theme_id,\n\t\t\t},\n\t\t}).then((theme) => {\n\t\t\tif(!theme){\n\t\t\t\tres.json(LOCAL_RESPONSES.PRODUCT_NOT_FOUND);\n\t\t\t}\n\t\t\tres.json(theme);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n};\n\n\nexports.removeByID = function (req, res) {\n\tlet ModelInstance = Theme;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.destroy({\n\t\t\twhere: {\n\t\t\t\tid: req.params.theme_id,\n\t\t\t},\n\t\t}).then((/*results*/) => {\n\t\t\tres.json(GLOBAL_RESPONSES.DELETE_SUCCESS);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n};\n\n\nexports.updateByID = function (req, res) {\n\tlet ModelInstance = Theme;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\tModelInstance.find({ where: { id: req.params.theme_id } }).then((model) =>\n\t\t{\n\t\t// Check if record exists in db\n\t\t\tif (model) {\n\t\t\t\tmodel.updateAttributes({\n\t\t\t\t\t...req.body\n\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tres.json(GLOBAL_RESPONSES.UPDATE_SUCCESS);\n\t\t\t\t\t}).catch((err) => {\n\t\t\t\t\t\tres.send(err);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}).catch((/*err*/) => {\n\t\t\tres.send(LOCAL_RESPONSES.THEME_NOT_FOUND);\t\n\t\t});\n\t});\n};"]}