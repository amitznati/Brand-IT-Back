{"version":3,"sources":["../../../src/api/product/product.controller.js"],"names":["GLOBAL_RESPONSES","require","LOCAL_RESPONSES","Kit","Product","Op","exports","create","req","res","ModelInstance","body","name","kits","sync","force","then","product","findAll","where","id","in","addKits","resultResponse","CREATE_SUCCESS","resourceId","dataValues","json","catch","err","send","getAll","limit","product_result","length","KIT_NOT_FOUND","getByID","findOne","include","model","attributes","exclude","through","params","product_id","removeByID","destroy","DELETE_SUCCESS","updateByID","find","updateAttributes","UPDATE_SUCCESS"],"mappings":"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","file":"product.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * POST\t/product\t\t\t\t ->\tcreate\n * GET\t /product\t\t\t\t ->\tgetAll\n * GET\t /product /:id\t\t\t->\tgetByID\n * DELETE\t/product /:id\t\t\t->\tremoveByID\n * PATCH\t /product /:id\t\t\t->\tupdateByID\n */\n\n//const _ = require('lodash');\n//const {ObjectID} = require('mongodb');\nconst GLOBAL_RESPONSES = require('../global/responses');\nconst LOCAL_RESPONSES = require('./responses');\nconst {Kit,Product, Op} = require('./../sequelize');\n\n\n\nexports.create = function(req, res) {\n\tlet ModelInstance = Product;\n\tconst {name,kits} = req.body;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.create({\n\t\t\tname: name\n\t\t}).then((product) => {\n\t\t\tif(kits) {\n\t\t\t\tKit.findAll({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\t[Op.in]: kits\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}).then((res) => {\n\t\t\t\t\tproduct.addKits(res);\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet resultResponse = GLOBAL_RESPONSES.CREATE_SUCCESS;\n\t\t\tresultResponse.resourceId = product.dataValues.id;\n\t\t\tres.json({resultResponse});\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\t});\n};\n\n\nexports.getAll = function (req, res) {\n\tlet ModelInstance = Product;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.findAll({\n\t\t\tlimit: 40\n\t\t}).then((product_result) => {\n\t\t\tif(!product_result || (product_result && product_result.length == 0)){\n\t\t\t\tres.json(LOCAL_RESPONSES.KIT_NOT_FOUND);\n\t\t\t}\n\t\t\tres.json(product_result);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n\t\n};\n\n\nexports.getByID = function (req, res) {\n\tlet ModelInstance = Product;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync().then(function () {\n\t\t// Table created\n\t\treturn Product.findOne({\n\t\t\tinclude: [{model: Kit, attributes: { exclude: ['category_id'] },through: { attributes: [] }}],\n\t\t\twhere: {\n\t\t\t\tid: req.params.product_id,\n\t\t\t},\n\t\t}).then((product) => {\n\t\t\tif(!product){\n\t\t\t\tres.json(LOCAL_RESPONSES.KIT_NOT_FOUND);\n\t\t\t}\n\t\t\tres.json(product);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n};\n\n\nexports.removeByID = function (req, res) {\n\tlet ModelInstance = Product;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.destroy({\n\t\t\twhere: {\n\t\t\t\tid: req.params.product_id,\n\t\t\t},\n\t\t}).then((/*results*/) => {\n\t\t\tres.json(GLOBAL_RESPONSES.DELETE_SUCCESS);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n};\n\n\nexports.updateByID = function (req, res) {\n\tlet ModelInstance = Product;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\tModelInstance.find({ where: { id: req.params.product_id } }).then((model) =>\n\t\t{\n\t\t// Check if record exists in db\n\t\t\tif (model) {\n\t\t\t\tmodel.updateAttributes({\n\t\t\t\t\tname: req.body.name\n\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tres.json(GLOBAL_RESPONSES.UPDATE_SUCCESS);\n\t\t\t\t\t}).catch((err) => {\n\t\t\t\t\t\tres.send(err);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}).catch((/*err*/) => {\n\t\t\tres.send(LOCAL_RESPONSES.KIT_NOT_FOUND);\t\n\t\t});\n\t});\n};"]}