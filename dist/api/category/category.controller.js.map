{"version":3,"sources":["../../../src/api/category/category.controller.js"],"names":["GLOBAL_RESPONSES","require","LOCAL_RESPONSES","Category","Kit","exports","create","req","res","ModelInstance","sync","force","then","name","body","category","resultResponse","CREATE_SUCCESS","resourceId","dataValues","id","json","catch","err","send","getAll","findAll","limit","category_result","length","CATEGORY_NOT_FOUND","getByID","findOne","include","model","attributes","where","params","category_id","removeByID","destroy","DELETE_SUCCESS","updateByID","find","updateAttributes","UPDATE_SUCCESS","addKit","CategoryId","findById"],"mappings":"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","file":"category.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * POST\t/category\t\t\t\t ->\tcreate\n * GET\t /category\t\t\t\t ->\tgetAll\n * GET\t /category /:id\t\t\t->\tgetByID\n * DELETE\t/category /:id\t\t\t->\tremoveByID\n * PATCH\t /category /:id\t\t\t->\tupdateByID\n */\n\n//const _ = require('lodash');\n//const {ObjectID} = require('mongodb');\nconst GLOBAL_RESPONSES = require('../global/responses');\nconst LOCAL_RESPONSES = require('./responses');\nconst {Category,Kit} = require('./../sequelize');\n\nexports.create = function(req, res) {\n\tlet ModelInstance = Category;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.create({\n\t\t\tname : req.body.name\n\t\t}).then((category) => {\n\t\t\tlet resultResponse = GLOBAL_RESPONSES.CREATE_SUCCESS;\n\t\t\tresultResponse.resourceId = category.dataValues.id;\n\t\t\tres.json({resultResponse});\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\t});\n};\n\n\nexports.getAll = function (req, res) {\n\tlet ModelInstance = Category;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.findAll({\t\n\t\t\tlimit: 40\n\t\t}).then((category_result) => {\n\t\t\tif(!category_result || (category_result && category_result.length == 0)){\n\t\t\t\tres.json(LOCAL_RESPONSES.CATEGORY_NOT_FOUND);\n\t\t\t}\n\t\t\tres.json(category_result);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n\t\n};\n\n\nexports.getByID = function (req, res) {\n\tlet ModelInstance = Category;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.findOne({\n\t\t\tinclude: [{model: Kit, attributes: ['id','name']}],\n\t\t\twhere: {\n\t\t\t\tid: req.params.category_id,\n\t\t\t},\n\t\t}).then((category) => {\n\t\t\tif(!category){\n\t\t\t\tres.json(LOCAL_RESPONSES.CATEGORY_NOT_FOUND);\n\t\t\t}\n\t\t\tres.json(category);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n};\n\n\nexports.removeByID = function (req, res) {\n\tlet ModelInstance = Category;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.destroy({\n\t\t\twhere: {\n\t\t\t\tid: req.params.category_id,\n\t\t\t},\n\t\t}).then((/*results*/) => {\n\t\t\tres.json(GLOBAL_RESPONSES.DELETE_SUCCESS);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n};\n\n\nexports.updateByID = function (req, res) {\n\tlet ModelInstance = Category;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\tModelInstance.find({ where: { id: req.params.category_id } }).then((model) =>\n\t\t{\n\t\t// Check if record exists in db\n\t\t\tif (model) {\n\t\t\t\tmodel.updateAttributes({\n\t\t\t\t\tname: req.body.name\n\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tres.json(GLOBAL_RESPONSES.UPDATE_SUCCESS);\n\t\t\t\t\t}).catch((err) => {\n\t\t\t\t\t\tres.send(err);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}).catch((/*err*/) => {\n\t\t\tres.send(LOCAL_RESPONSES.CATEGORY_NOT_FOUND);\t\n\t\t});\n\t});\n};\n\nexports.addKit = (req,res) => {\n\tconst {name} = req.body;\n\tconst CategoryId = req.params.category_id;\n\tlet ModelInstance = Category;\n\tModelInstance.findById(req.params.category_id)\n\t\t.then(() => Kit.create({name,CategoryId}))\n\t\t.then(() => Category.findOne({\n\t\t\tinclude: [Kit],\n\t\t\twhere: {\n\t\t\t\tid: CategoryId,\n\t\t\t},\n\t\t}).then((category) => {\n\t\t\tif(!category){\n\t\t\t\tres.json(LOCAL_RESPONSES.CATEGORY_NOT_FOUND);\n\t\t\t}\n\t\t\tres.json(category);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t}));\n};"]}