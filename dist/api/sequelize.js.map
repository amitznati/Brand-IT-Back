{"version":3,"sources":["../../src/api/sequelize.js"],"names":["Sequelize","require","config","sequelize","sql","db","Op","CategoryModel","KitModel","ProductModel","ThemeModel","KitProduct","define","Category","Kit","Product","Theme","hasMany","foreignKey","sourceKey","belongsTo","belongsToMany","through","sync","force","then","console","log","module","exports"],"mappings":";;AACA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,SAAUD,QAAQ,OAAR,CAAhB;AACA,IAAIE,YAAY,IAAIH,SAAJ,CAAcE,OAAOE,GAAP,CAAWC,EAAzB,CAAhB;IACOC,E,GAAMN,S,CAANM,E;;AACP,IAAMC,gBAAgBN,QAAQ,2BAAR,CAAtB;AACA,IAAMO,WAAWP,QAAQ,iBAAR,CAAjB;AACA,IAAMQ,eAAeR,QAAQ,yBAAR,CAArB;AACA,IAAMS,aAAaT,QAAQ,qBAAR,CAAnB;AACA;AACA;AACA;AACA,IAAMU,aAAaR,UAAUS,MAAV,CAAiB,aAAjB,EAAgC,EAAhC,CAAnB;AACA;AACA;AACA,IAAMC,WAAWN,cAAcJ,SAAd,EAAwBH,SAAxB,CAAjB;AACA,IAAMc,MAAMN,SAASL,SAAT,EAAmBH,SAAnB,CAAZ;AACA,IAAMe,UAAUN,aAAaN,SAAb,EAAuBH,SAAvB,CAAhB;AACA,IAAMgB,QAAQN,WAAWP,SAAX,EAAqBH,SAArB,CAAd;AACA;AACA;AACA;AACAa,SAASI,OAAT,CAAiBH,GAAjB,EAAsB,EAACI,YAAY,aAAb,EAA4BC,WAAW,IAAvC,EAAtB;AACAL,IAAIM,SAAJ,CAAcP,QAAd,EAAuB,EAACK,YAAY,aAAb,EAA4BC,WAAW,IAAvC,EAAvB;;AAEAL,IAAIO,aAAJ,CAAkBN,OAAlB,EAA2B,EAAEO,SAASX,UAAX,EAA3B;AACAI,QAAQM,aAAR,CAAsBP,GAAtB,EAA2B,EAAEQ,SAASX,UAAX,EAA3B;;AAEAR,UAAUoB,IAAV,CAAe,EAAEC,OAAO,IAAT,EAAf,EACEC,IADF,CACO,YAAM;AACXC,SAAQC,GAAR,CAAY,4BAAZ;AACA,CAHF;;AAKAC,OAAOC,OAAP,GAAiB;AAChBvB,OADgB;AAEhBO,mBAFgB;AAGhBC,SAHgB;AAIhBC,iBAJgB;AAKhBC;AALgB,CAAjB","file":"sequelize.js","sourcesContent":["\r\nconst Sequelize = require('sequelize');\r\nconst config\t\t= require('../db');\r\nvar sequelize = new Sequelize(config.sql.db);\r\nconst {Op} = Sequelize;\r\nconst CategoryModel = require('./category/model/category');\r\nconst KitModel = require('./kit/model/kit');\r\nconst ProductModel = require('./product/model/product');\r\nconst ThemeModel = require('./theme/model/theme');\r\n//const User = UserModel(sequelize, Sequelize);\r\n// BlogTag will be our way of tracking relationship between Blog and Tag models\r\n// each Blog can have multiple tags and each Tag can have multiple blogs\r\nconst KitProduct = sequelize.define('kit_product', {});\r\n//const Blog = BlogModel(sequelize, Sequelize);\r\n//const Tag = TagModel(sequelize, Sequelize);\r\nconst Category = CategoryModel(sequelize,Sequelize);\r\nconst Kit = KitModel(sequelize,Sequelize);\r\nconst Product = ProductModel(sequelize,Sequelize);\r\nconst Theme = ThemeModel(sequelize,Sequelize);\r\n//Blog.belongsToMany(Tag, { through: BlogTag, unique: false });\r\n//Tag.belongsToMany(Blog, { through: BlogTag, unique: false });\r\n//Blog.belongsTo(User);\r\nCategory.hasMany(Kit, {foreignKey: 'category_id', sourceKey: 'id'});\r\nKit.belongsTo(Category,{foreignKey: 'category_id', sourceKey: 'id'});\r\n\r\nKit.belongsToMany(Product, { through: KitProduct });\r\nProduct.belongsToMany(Kit, { through: KitProduct });\r\n\r\nsequelize.sync({ force: true })\r\n\t.then(() => {\r\n\t\tconsole.log('Database & tables created!');\r\n\t});\r\n\r\nmodule.exports = {\r\n\tOp,\r\n\tCategory,\r\n\tKit,\r\n\tProduct,\r\n\tTheme\r\n};"]}