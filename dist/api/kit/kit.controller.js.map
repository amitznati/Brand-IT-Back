{"version":3,"sources":["../../../src/api/kit/kit.controller.js"],"names":["GLOBAL_RESPONSES","require","LOCAL_RESPONSES","Kit","Category","Product","exports","create","req","res","ModelInstance","sync","force","then","body","kit","resultResponse","CREATE_SUCCESS","resourceId","dataValues","id","json","catch","err","send","getAll","findAll","limit","kit_result","length","KIT_NOT_FOUND","getByID","findOne","include","model","through","attributes","where","params","kit_id","PRODUCT_NOT_FOUND","removeByID","destroy","DELETE_SUCCESS","updateByID","find","updateAttributes","name","UPDATE_SUCCESS"],"mappings":";;;;AAAA;;;;;;;;;AASA;AACA;AACA,IAAMA,mBAAmBC,QAAQ,qBAAR,CAAzB;AACA,IAAMC,kBAAkBD,QAAQ,aAAR,CAAxB;;eAEgCA,QAAQ,gBAAR,C;IAAzBE,G,YAAAA,G;IAAIC,Q,YAAAA,Q;IAAUC,O,YAAAA,O;;AAIrBC,QAAQC,MAAR,GAAiB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACnC,KAAIC,gBAAgBP,GAApB;AACA;AACAO,eAAcC,IAAd,CAAmB,EAACC,OAAO,KAAR,EAAnB,EAAmCC,IAAnC,CAAwC,YAAY;AACnD;AACA,SAAOH,cAAcH,MAAd,cACHC,IAAIM,IADD,GAEJD,IAFI,CAEC,UAACE,GAAD,EAAS;AAChB,OAAIC,iBAAiBhB,iBAAiBiB,cAAtC;AACAD,kBAAeE,UAAf,GAA4BH,IAAII,UAAJ,CAAeC,EAA3C;AACAX,OAAIY,IAAJ,CAAS,EAACL,8BAAD,EAAT;AACA,GANM,EAMJM,KANI,CAME,UAACC,GAAD,EAAQ;AAChBd,OAAIe,IAAJ,CAASD,GAAT;AACA,GARM,CAAP;AASA,EAXD;AAYA,CAfD;;AAkBAjB,QAAQmB,MAAR,GAAiB,UAAUjB,GAAV,EAAeC,GAAf,EAAoB;AACpC,KAAIC,gBAAgBP,GAApB;AACA;AACAO,eAAcC,IAAd,CAAmB,EAACC,OAAO,KAAR,EAAnB,EAAmCC,IAAnC,CAAwC,YAAY;AACnD;AACA,SAAOH,cAAcgB,OAAd,CAAsB;AAC5BC,UAAO;AADqB,GAAtB,EAEJd,IAFI,CAEC,UAACe,UAAD,EAAgB;AACvB,OAAG,CAACA,UAAD,IAAgBA,cAAcA,WAAWC,MAAX,IAAqB,CAAtD,EAAyD;AACxDpB,QAAIY,IAAJ,CAASnB,gBAAgB4B,aAAzB;AACA;AACDrB,OAAIY,IAAJ,CAASO,UAAT;AACA,GAPM,EAOJN,KAPI,CAOE,UAACC,GAAD,EAAQ;AAChBd,OAAIe,IAAJ,CAASD,GAAT;AACA,GATM,CAAP;AAWA,EAbD;AAeA,CAlBD;;AAqBAjB,QAAQyB,OAAR,GAAkB,UAAUvB,GAAV,EAAeC,GAAf,EAAoB;AACrC,KAAIC,gBAAgBP,GAApB;AACA;AACAO,eAAcC,IAAd,GAAqBE,IAArB,CAA0B,YAAY;AACrC;AACA,SAAOV,IAAI6B,OAAJ,CAAY;AAClBC,YAAS,CACR7B,QADQ,EAER,EAAC8B,OAAO7B,OAAR,EAAgB8B,SAAS,EAAEC,YAAY,EAAd,EAAzB,EAFQ,CADS;AAKlBC,UAAO;AACNjB,QAAIZ,IAAI8B,MAAJ,CAAWC;AADT,IALW;AAQlBH,eAAY,CAAC,IAAD,EAAM,MAAN;AARM,GAAZ,EASJvB,IATI,CASC,UAACE,GAAD,EAAS;AAChB,OAAG,CAACA,GAAJ,EAAQ;AACPN,QAAIY,IAAJ,CAASnB,gBAAgBsC,iBAAzB;AACA;AACD/B,OAAIY,IAAJ,CAASN,GAAT;AACA,GAdM,EAcJO,KAdI,CAcE,UAACC,GAAD,EAAQ;AAChBd,OAAIe,IAAJ,CAASD,GAAT;AACA,GAhBM,CAAP;AAkBA,EApBD;AAqBA,CAxBD;;AA2BAjB,QAAQmC,UAAR,GAAqB,UAAUjC,GAAV,EAAeC,GAAf,EAAoB;AACxC,KAAIC,gBAAgBP,GAApB;AACA;AACAO,eAAcC,IAAd,CAAmB,EAACC,OAAO,KAAR,EAAnB,EAAmCC,IAAnC,CAAwC,YAAY;AACnD;AACA,SAAOH,cAAcgC,OAAd,CAAsB;AAC5BL,UAAO;AACNjB,QAAIZ,IAAI8B,MAAJ,CAAWC;AADT;AADqB,GAAtB,EAIJ1B,IAJI,CAIC,YAAC,WAAgB;AACxBJ,OAAIY,IAAJ,CAASrB,iBAAiB2C,cAA1B;AACA,GANM,EAMJrB,KANI,CAME,UAACC,GAAD,EAAQ;AAChBd,OAAIe,IAAJ,CAASD,GAAT;AACA,GARM,CAAP;AAUA,EAZD;AAaA,CAhBD;;AAmBAjB,QAAQsC,UAAR,GAAqB,UAAUpC,GAAV,EAAeC,GAAf,EAAoB;AACxC,KAAIC,gBAAgBP,GAApB;AACA;AACAO,eAAcC,IAAd,CAAmB,EAACC,OAAO,KAAR,EAAnB,EAAmCC,IAAnC,CAAwC,YAAY;AACnDH,gBAAcmC,IAAd,CAAmB,EAAER,OAAO,EAAEjB,IAAIZ,IAAI8B,MAAJ,CAAWC,MAAjB,EAAT,EAAnB,EAAyD1B,IAAzD,CAA8D,UAACqB,KAAD,EAC9D;AACA;AACC,OAAIA,KAAJ,EAAW;AACVA,UAAMY,gBAAN,CAAuB;AACtBC,WAAMvC,IAAIM,IAAJ,CAASiC;AADO,KAAvB,EAGElC,IAHF,CAGO,YAAM;AACXJ,SAAIY,IAAJ,CAASrB,iBAAiBgD,cAA1B;AACA,KALF,EAKI1B,KALJ,CAKU,UAACC,GAAD,EAAS;AACjBd,SAAIe,IAAJ,CAASD,GAAT;AACA,KAPF;AAQA;AACD,GAbD,EAaGD,KAbH,CAaS,YAAC,OAAY;AACrBb,OAAIe,IAAJ,CAAStB,gBAAgB4B,aAAzB;AACA,GAfD;AAgBA,EAjBD;AAkBA,CArBD","file":"kit.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * POST\t/kit\t\t\t\t ->\tcreate\n * GET\t /kit\t\t\t\t ->\tgetAll\n * GET\t /kit /:id\t\t\t->\tgetByID\n * DELETE\t/kit /:id\t\t\t->\tremoveByID\n * PATCH\t /kit /:id\t\t\t->\tupdateByID\n */\n\n//const _ = require('lodash');\n//const {ObjectID} = require('mongodb');\nconst GLOBAL_RESPONSES = require('../global/responses');\nconst LOCAL_RESPONSES = require('./responses');\n\nconst {Kit,Category, Product} = require('./../sequelize');\n\n\n\nexports.create = function(req, res) {\n\tlet ModelInstance = Kit;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.create({\n\t\t\t...req.body\n\t\t}).then((kit) => {\n\t\t\tlet resultResponse = GLOBAL_RESPONSES.CREATE_SUCCESS;\n\t\t\tresultResponse.resourceId = kit.dataValues.id;\n\t\t\tres.json({resultResponse});\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\t});\n};\n\n\nexports.getAll = function (req, res) {\n\tlet ModelInstance = Kit;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.findAll({\n\t\t\tlimit: 40\n\t\t}).then((kit_result) => {\n\t\t\tif(!kit_result || (kit_result && kit_result.length == 0)){\n\t\t\t\tres.json(LOCAL_RESPONSES.KIT_NOT_FOUND);\n\t\t\t}\n\t\t\tres.json(kit_result);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n\t\n};\n\n\nexports.getByID = function (req, res) {\n\tlet ModelInstance = Kit;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync().then(function () {\n\t\t// Table created\n\t\treturn Kit.findOne({\n\t\t\tinclude: [\n\t\t\t\tCategory,\n\t\t\t\t{model: Product,through: { attributes: [] }}\n\t\t\t],\n\t\t\twhere: {\n\t\t\t\tid: req.params.kit_id,\n\t\t\t},\n\t\t\tattributes: ['id','name']\n\t\t}).then((kit) => {\n\t\t\tif(!kit){\n\t\t\t\tres.json(LOCAL_RESPONSES.PRODUCT_NOT_FOUND);\n\t\t\t}\n\t\t\tres.json(kit);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n};\n\n\nexports.removeByID = function (req, res) {\n\tlet ModelInstance = Kit;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\t// Table created\n\t\treturn ModelInstance.destroy({\n\t\t\twhere: {\n\t\t\t\tid: req.params.kit_id,\n\t\t\t},\n\t\t}).then((/*results*/) => {\n\t\t\tres.json(GLOBAL_RESPONSES.DELETE_SUCCESS);\n\t\t}).catch((err) =>{\n\t\t\tres.send(err);\n\t\t});\n\n\t});\n};\n\n\nexports.updateByID = function (req, res) {\n\tlet ModelInstance = Kit;\n\t// force: true will drop the table if it already exists\n\tModelInstance.sync({force: false}).then(function () {\n\t\tModelInstance.find({ where: { id: req.params.kit_id } }).then((model) =>\n\t\t{\n\t\t// Check if record exists in db\n\t\t\tif (model) {\n\t\t\t\tmodel.updateAttributes({\n\t\t\t\t\tname: req.body.name\n\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tres.json(GLOBAL_RESPONSES.UPDATE_SUCCESS);\n\t\t\t\t\t}).catch((err) => {\n\t\t\t\t\t\tres.send(err);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}).catch((/*err*/) => {\n\t\t\tres.send(LOCAL_RESPONSES.KIT_NOT_FOUND);\t\n\t\t});\n\t});\n};"]}