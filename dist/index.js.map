{"version":3,"sources":["../src/index.js"],"names":["express","require","mongoose","bodyParser","config","users","useMongo","connect","mongo","dbUrl","useNewUrlParser","then","console","log","err","useSql","Sequelize","sequelize","sql","db","define","timestamps","authenticate","catch","error","app","use","passport","initialize","urlencoded","extended","json","default","get","req","res","send","static","PORT","process","env","listen"],"mappings":";;;;;;AAGA;;;;;;AAHA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,aAAaF,QAAQ,aAAR,CAAnB;;AAEA,IAAMG,SAASH,QAAQ,MAAR,CAAf;;AAEA,IAAMI,QAAQJ,QAAQ,eAAR,CAAd;;AAEA,IAAGG,OAAOE,QAAV,EAAoB;AACnBJ,UAASK,OAAT,CAAiBH,OAAOI,KAAP,CAAaC,KAA9B,EAAqC,EAAEC,iBAAiB,IAAnB,EAArC,EAAgEC,IAAhE,CACC,YAAM;AAACC,UAAQC,GAAR,CAAY,uBAAZ;AAAuC,EAD/C,EAEC,eAAO;AAAED,UAAQC,GAAR,CAAY,oCAAmCC,GAA/C;AAAsD,EAFhE;AAIA;AACD,IAAGV,OAAOW,MAAV,EAAiB;AAChB,KAAIC,YAAYf,QAAQ,WAAR,CAAhB;AACA,KAAIgB,YAAY,IAAID,SAAJ,CAAcZ,OAAOc,GAAP,CAAWC,EAAzB,EAA4B,EAACC,QAAQ;AACpDC,eAAY;AADwC,GAAT,EAA5B,CAAhB;AAGAJ,WACEK,YADF,GAEEX,IAFF,CAEO,YAAM;AACXC,UAAQC,GAAR,CAAY,+CAAZ;AACA,EAJF,EAKEU,KALF,CAKQ,eAAO;AACbX,UAAQY,KAAR,CAAc,oCAAd,EAAoDV,GAApD;AACA,EAPF;AAQA;;AAED,IAAMW,MAAMzB,SAAZ;AACAyB,IAAIC,GAAJ,CAAQC,mBAASC,UAAT,EAAR;AACA3B,QAAQ,YAAR,EAAsB0B,kBAAtB;;AAEAF,IAAIC,GAAJ,CAAQvB,WAAW0B,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAL,IAAIC,GAAJ,CAAQvB,WAAW4B,IAAX,EAAR;;AAEAN,IAAIC,GAAJ,CAAQ,YAAR,EAAsBrB,KAAtB;;AAEA;AACAJ,QAAQ,cAAR,EAAwB+B,OAAxB,CAAgCP,GAAhC;;AAEAA,IAAIQ,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC/BA,KAAIC,IAAJ,CAAS,OAAT;AACA,CAFD;;AAIAX,IAAIC,GAAJ,CAAQ1B,QAAQqC,MAAR,CAAe,mBAAf,CAAR;AACA,IAAMC,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AAEAb,IAAIgB,MAAJ,CAAWH,IAAX,EAAiB,YAAM;AACtB1B,SAAQC,GAAR,gCAAyCyB,IAAzC;AACA,CAFD;;kBAIeb,G","file":"index.js","sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nimport passport from 'passport';\nconst config = require('./db');\n\nconst users = require('./routes/user'); \n\nif(config.useMongo) {\n\tmongoose.connect(config.mongo.dbUrl, { useNewUrlParser: true }).then(\n\t\t() => {console.log('Database is connected'); },\n\t\terr => { console.log('Can not connect to the database'+ err); }\n\t);\n}\nif(config.useSql){\n\tvar Sequelize = require('sequelize');\n\tvar sequelize = new Sequelize(config.sql.db,{define: {\n\t\ttimestamps: false\n\t}});\n\tsequelize\n\t\t.authenticate()\n\t\t.then(() => {\n\t\t\tconsole.log('Connection has been established successfully.');\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.error('Unable to connect to the database:', err);\n\t\t});\n}\n\nconst app = express();\napp.use(passport.initialize());\nrequire('./passport')(passport);\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.use('/api/users', users);\n\n// REGISTER OUR ROUTES -------------------------------\nrequire('./routes/api').default(app);\n\napp.get('/', function(req, res) {\n\tres.send('hello');\n});\n\napp.use(express.static('./uploads/themes/'));\nconst PORT = process.env.PORT || 5000;\n\napp.listen(PORT, () => {\n\tconsole.log(`Server is running on PORT ${PORT}`);\n});\n\nexport default app;"]}